
// Opcode definitions for gameboy CPU
// (C) C. Kummer

#ifndef OPCODE_H
#define OPCODE_H

////////////////////////////////////////////////////////////////////////////////
// CONTROL INSTRUCTIONS ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// NO-OP. Does nothing, no arguments
#define NOP 0x00
#define NOP_CYCLE_COUNT 4
#define NOP_ARGLEN 1

// HALT. Halts program execution until interrupt occurs
#define HALT 0x76
#define HALT_CYCLE_COUNT 4
#define HALT_ARGLEN 1

////////////////////////////////////////////////////////////////////////////////
// LOAD INSTRUCTIONS ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// 8-bit loads

////////////////////////////////////////////////////////////////////////////////
// Register-immediate loads/////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Cycle count for these loads
#define LD_CYCLE_COUNT_REGISTER_IMMEDIATE_8 8
// TODO: Fix name
#define LD_REGISTER_IMMEDIATE_LEN 2

#define LD_B_d8 0x06
#define LD_D_d8 0x16
#define LD_H_d8 0x26
#define LD_C_d8 0x0e
#define LD_E_d8 0x1e
#define LD_L_d8 0x2e
#define LD_A_d8 0x3e

////////////////////////////////////////////////////////////////////////////////
// Register-register loads /////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_CYCLE_COUNT_REGISTER_REGISTER 4
#define LD_REGISTER_REGISTER_ARGLEN 1

// Load into A
#define LD_A_A 0x7f
#define LD_A_B 0x78
#define LD_A_C 0x79
#define LD_A_D 0x7a
#define LD_A_E 0x7b
#define LD_A_H 0x7c
#define LD_A_L 0x7d

// Load into B
#define LD_B_A 0x47
#define LD_B_B 0x40
#define LD_B_C 0x41
#define LD_B_D 0x42
#define LD_B_E 0x43
#define LD_B_H 0x44
#define LD_B_L 0x45

// Load into C
#define LD_C_A 0x4f
#define LD_C_B 0x48
#define LD_C_C 0x49
#define LD_C_D 0x4a
#define LD_C_E 0x4b
#define LD_C_H 0x4c
#define LD_C_L 0x4d

// Load into D
#define LD_D_A 0x57
#define LD_D_B 0x50
#define LD_D_C 0x51
#define LD_D_D 0x52
#define LD_D_E 0x53
#define LD_D_H 0x54
#define LD_D_L 0x55

// Load into E
#define LD_E_A 0x5f
#define LD_E_B 0x58
#define LD_E_C 0x59
#define LD_E_D 0x5a
#define LD_E_E 0x5b
#define LD_E_H 0x5c
#define LD_E_L 0x5d

// Load into H
#define LD_H_A 0x67
#define LD_H_B 0x60
#define LD_H_C 0x61
#define LD_H_D 0x62
#define LD_H_E 0x63
#define LD_H_H 0x64
#define LD_H_L 0x65

// Load into L
#define LD_L_A 0x6f
#define LD_L_B 0x68
#define LD_L_C 0x69
#define LD_L_D 0x6a
#define LD_L_E 0x6b
#define LD_L_H 0x6c
#define LD_L_L 0x6d

////////////////////////////////////////////////////////////////////////////////
// Register-memory indirect loads //////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_REG_MEM_INDIRECT_CYCLE_COUNT 8
#define LD_REG_INDIRECT_REGISTER_ARGLEN 1

#define LD_A_HL 0x7e
#define LD_B_HL 0x46
#define LD_C_HL 0x4e
#define LD_D_HL 0x56
#define LD_E_HL 0x5e
#define LD_H_HL 0x66
#define LD_L_HL 0x6e

// Specific to register A
#define LD_A_BC 0x0a
#define LD_A_DE 0x1a

////////////////////////////////////////////////////////////////////////////////
// Memory-indirect-register loads //////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_MEM_INDIRECT_REGISTER_CYCLE_COUNT 8
#define LD_REGISTER_REG_MEM_INDIRECT_ARGLEN 1

#define LD_HL_A 0x77
#define LD_HL_B 0x70
#define LD_HL_C 0x71
#define LD_HL_D 0x72
#define LD_HL_E 0x73
#define LD_HL_H 0x74
#define LD_HL_L 0x75

// Specific to register A
#define LD_BC_A 0x02
#define LD_DE_A 0x12

////////////////////////////////////////////////////////////////////////////////
// Immediate to register-indirect load /////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_IMM_TO_INDIRECT_REGISTER_CYCLE_COUNT 12
#define LD_IMM_TO_INDIRECT_REGISTER_ARGLEN 2

#define LD_HL_d8 0x36

////////////////////////////////////////////////////////////////////////////////
// Dereferenced memory address to accumulator //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_ADDR_TO_REG_CYCLE_COUNT 16
#define LD_ADDR_TO_REG_ARGLEN 3

#define LD_A_a16p 0xfa
#define LD_a16p_A 0xea

////////////////////////////////////////////////////////////////////////////////
// (C) to accumulator //////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_A_C_CYCLES 8
#define LD_A_C_ARGLEN 1

#define LD_A_C_INDIRECT 0xf2
#define LD_C_INDIRECT_A 0xe2

////////////////////////////////////////////////////////////////////////////////
// (HL) decrement to A /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_DEC_A_CYCLES 8
#define LD_DEC_A_ARGLEN 1

#define LD_DEC_A 0x3a
#define LD_A_DEC 0x32

////////////////////////////////////////////////////////////////////////////////
// (HL) increment to A /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_INC_A 0x2a
#define LD_A_INC 0x22

////////////////////////////////////////////////////////////////////////////////
// 8-bit direct adress to A ////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_A_a8p_CYCLES 12
#define LD_A_a8p_ARGLEN 2

#define LD_A_a8p 0xe0
#define LD_a8p_A 0xf0

////////////////////////////////////////////////////////////////////////////////
// 16-bit loads ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Combined register immediate /////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_COMB_CYCLES 12
#define LD_COMB_ARGLEN 3

#define LD_BC_d16 0x01
#define LD_DE_d16 0x11
#define LD_HL_d16 0x21
#define LD_SP_d16 0x31

////////////////////////////////////////////////////////////////////////////////
// Register to stack pointer ///////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_REG_SP_CYCLES 8
#define LD_REG_SP_ARGLEN 1

#define LD_SP_HL 0xf9

////////////////////////////////////////////////////////////////////////////////
// Register to stack pointer with 8 bit immediate offset ///////////////////////
////////////////////////////////////////////////////////////////////////////////
// Flags: Z N H C 
#define LDHL_CYCLES 12
#define LDHL_ARGLEN 2

#define LD_HL_SP_N 0xf8

////////////////////////////////////////////////////////////////////////////////
/// Stack pointer to address nn ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define LD_d16_SP_CYCLES 20
#define LD_d16_SP_ARGLEN 3

#define LD_d16p_SP 0x08

////////////////////////////////////////////////////////////////////////////////
// Stack operations ////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Push register pairs on stack

#define PUSH_REGS_CYCLES 16
#define PUSH_REGS_ARGLEN 1

#define PUSH_AF 0xf5
#define PUSH_BC 0xc5
#define PUSH_DE 0xd5
#define PUSH_HL 0xe5

// Pop two bytes off stack into register pair

#define POP_REGS_CYCLES 16
#define POP_REGS_ARGLEN 1

#define POP_AF 0xf1
#define POP_BC 0xc1
#define POP_DE 0xd1
#define POP_HL 0xe1

////////////////////////////////////////////////////////////////////////////////

#endif // OPCODE_H
